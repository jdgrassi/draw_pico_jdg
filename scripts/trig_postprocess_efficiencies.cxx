//root macro to take ntuple generated by plot_triggers and generate histograms and script to apply efficiencies
//macro usage: root -l scripts/trig_postprocess_efficiencies.cxx

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include "TFile.h"
#include "TGraphAsymmErrors.h"

//helper functions
std::vector<float> geteff_0l(float met, float ht);
std::vector<float> geteff_0l_fakemet(float met, float ht);
std::vector<float> geteff_1el(float met, float el_pt);
std::vector<float> geteff_1mu(float met, float mu_pt);
std::vector<float> geteff_2el(float el_pt);
std::vector<float> geteff_2mu(float mu_pt);

int trig_postprocess_efficiencies() {
    //boolean flags to set what to do
    bool draw_truemet_graphs = true;
    bool draw_fakemet_graphs = true;
    bool draw_1el_graphs = true;
    bool draw_1mu_graphs = true;
    bool draw_2l_graphs = true;
    //2016 rdfat_qcd2016_htrange.root and trig_eff_old_fullefficiencies.root
    //2017 rdfat_qcd2017.root and trig_eff_old_eff_2017.root
    //2017 rdfat_qcd2018.root and trig_eff_old_eff_2018.root
    TFile* f = TFile::Open("ntuples/triggereff.root");
    TFile* f_qcd = TFile::Open("ntuples/rdfat_qcd2018.root");
    std::string year = "2018";
    std::vector<double> true_met_bins{150,155,160,165,170,175,180,185,190,195,200,210,220,230,240,250,275,300,350};
    std::vector<double> sys_met_bins{150,160,180,200,225,250,300,350};
    std::vector<double> fake_met_bins{150,155,160,165,170,175,180,185,190,195,200,210,220,230,240,250,275,300,350,400,450,500,550};
    std::vector<double> ht_bins{0,200,600,800,1000,1200};
    std::vector<double> twodim_met_bins{0,110,120,130,140,150,160,170,180,190,200,210,250};
    std::vector<double> el_pt_bins{20,25,30,110,120,150};
    std::vector<double> mu_pt_bins{20,25,30,50,100};
    std::vector<double> twoel_pt_bins{40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,120};
    std::vector<double> twomu_pt_bins{40,45,50,60};
    ofstream apply_effs_file;
    apply_effs_file.open("src/higgsino/apply_trigeffs.cpp");
    apply_effs_file << "#include <vector>\n";
    apply_effs_file << "#include \"core/baby.hpp\"\n";
    apply_effs_file << "#include \"core/process.hpp\"\n";
    apply_effs_file << "#include \"core/named_func.hpp\"\n";
    apply_effs_file << "#include \"higgsino/hig_functions.hpp\"\n";
    apply_effs_file << "#include \"higgsino/apply_trigeffs" << year << ".hpp\"\n\n";
    //apply_effs_file << "float signal_lepton_pt(std::vector<float>* const lep_pt, std::vector<bool>* const lep_sig) {\n";
    //apply_effs_file << "  float r_signal_lepton_pt = 0;\n";
    //apply_effs_file << "  for (unsigned int lep_idx = 0; lep_idx < lep_sig->size(); lep_idx++) {\n";
    //apply_effs_file << "    if (lep_sig->at(lep_idx)) {\n";
    //apply_effs_file << "      r_signal_lepton_pt = lep_pt->at(lep_idx);\n";
    //apply_effs_file << "      break;\n";
    //apply_effs_file << "    }\n";
    //apply_effs_file << "  }\n";
    //apply_effs_file << "  return r_signal_lepton_pt;\n";
    //apply_effs_file << "}\n\n";
    apply_effs_file << "namespace Higfuncs{\n\n";
    //make graphs
    //true met histograms
    if (draw_truemet_graphs) {
	//loop over ht - each ht bin is a new TGraphAsymmErrors
	std::vector<TCanvas*> truemet_canvas;
	std::vector<TGraphAsymmErrors*> an_eff_plots;
	std::vector<TGraphAsymmErrors*> new_eff_plots;
	for (int ht_bin = 0; ht_bin < ht_bins.size()-1; ht_bin++) {
	    double ht_value = (ht_bins[ht_bin]+ht_bins[ht_bin+1])/2;
	    truemet_canvas.push_back(new TCanvas());
	    truemet_canvas[ht_bin]->cd();
	    truemet_canvas[ht_bin]->SetGrid();
	    std::vector<double> met_values;
	    std::vector<double> met_range_values;
	    std::vector<double> eff_values;
	    std::vector<double> errup_values;
	    std::vector<double> errdown_values;
	    //loop over met bins for old efficiencies
	    for (int met_bin = 0; met_bin < true_met_bins.size()-1; met_bin++) {
	        double met_value = (true_met_bins[met_bin]+true_met_bins[met_bin+1])/2;
	        double met_bin_range = (true_met_bins[met_bin+1]-true_met_bins[met_bin])/2;
	        met_values.push_back(met_value);
	        met_range_values.push_back(met_bin_range);
		std::vector<float> eff_errs = geteff_0l(met_value, ht_value);
		eff_values.push_back(eff_errs[0]);
		errup_values.push_back(eff_errs[1]);
		errdown_values.push_back(eff_errs[2]);
	    }
	    //get new efficiencies from histograms
            TH2D* numerator_hist = static_cast<TH2D*>((f->Get("hist_realmetht_numerator"))->Clone());
            TH2D* denominator_hist = static_cast<TH2D*>((f->Get("hist_realmetht_denominator"))->Clone());
	    TH1D* numerator_1d_hist = numerator_hist->ProjectionX("numerator_1d_hist",ht_bin+1,ht_bin+1);
	    TH1D* denominator_1d_hist = denominator_hist->ProjectionX("denominator_1d_hist",ht_bin+1,ht_bin+1);
	    new_eff_plots.push_back(new TGraphAsymmErrors(numerator_1d_hist,denominator_1d_hist));
	    an_eff_plots.push_back(new TGraphAsymmErrors(met_values.size(),met_values.data(),eff_values.data(),met_range_values.data(),met_range_values.data(),errdown_values.data(),errup_values.data()));
	    an_eff_plots[ht_bin]->SetTitle(("0l trigger efficiency HT#in ["+std::to_string(ht_bins[ht_bin])+","+std::to_string(ht_bins[ht_bin+1])+"]; MET; Efficiency").c_str());
  	    an_eff_plots[ht_bin]->GetYaxis()->SetRangeUser(0,1.4);
	    an_eff_plots[ht_bin]->SetLineColor(kRed);
	    an_eff_plots[ht_bin]->Draw("AP");
	    new_eff_plots[ht_bin]->Draw("P same");
	    TLegend* leg = new TLegend(0.5,0.1,0.9,0.3);
	    leg->AddEntry(new_eff_plots[ht_bin],"New Efficiency MET(100, 110, 120)(NoMu)","f");
	    leg->AddEntry(an_eff_plots[ht_bin],"AN Efficiency MET(100, 110, 120)(NoMu)","f");
	    leg->Draw("same");
	    truemet_canvas[ht_bin]->SaveAs(("plots/truemet_effhtbin_"+std::to_string(ht_bin)+".png").c_str());
	}
	//write out function to file
        apply_effs_file << "const NamedFunc get_0l_trigeff" << year << "(\"get_0l_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., met = b.met(), ht = b.ht();\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	bool first = true;
	for (int met_bin = 0; met_bin < true_met_bins.size()-1; met_bin++) {
	    double met_upper = met_bin==(true_met_bins.size()-2) ? 9999 : true_met_bins[met_bin+1];
	    for (int ht_bin = 0; ht_bin < ht_bins.size()-1; ht_bin++) {
	        double ht_upper = ht_bin==(ht_bins.size()-2) ? 9999 : ht_bins[ht_bin+1];
		double* eff_pts = new_eff_plots[ht_bin]->GetY();
                if (first) {
		    apply_effs_file << "  if (ht> ";
		    first = false;
		}
		else apply_effs_file << "  else if (ht> ";
		apply_effs_file << ht_bins[ht_bin] << " && ht<= " << ht_upper;
		apply_effs_file << " && met> " << true_met_bins[met_bin] << " && met<= " << met_upper;
		apply_effs_file << ") {eff = " << eff_pts[met_bin] << "; errup = " << new_eff_plots[ht_bin]->GetErrorYhigh(met_bin) << "; errdown = " << new_eff_plots[ht_bin]->GetErrorYlow(met_bin) << ";}\n";
	    }
	}
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
    }
    //fake met histograms
    if (draw_fakemet_graphs) {
	//loop over ht - each ht bin is a new TGraphAsymmErrors
	std::vector<TCanvas*> fakemet_canvas;
	std::vector<TGraphAsymmErrors*> an_eff_plots;
	std::vector<TGraphAsymmErrors*> new_eff_plots;
	for (int ht_bin = 0; ht_bin < ht_bins.size()-1; ht_bin++) {
	    double ht_value = (ht_bins[ht_bin]+ht_bins[ht_bin+1])/2;
	    fakemet_canvas.push_back(new TCanvas());
	    fakemet_canvas[ht_bin]->cd();
	    fakemet_canvas[ht_bin]->SetGrid();
	    std::vector<double> met_values;
	    std::vector<double> met_range_values;
	    std::vector<double> eff_values;
	    std::vector<double> errup_values;
	    std::vector<double> errdown_values;
	    //loop over met bins for old efficiencies
	    for (int met_bin = 0; met_bin < fake_met_bins.size()-1; met_bin++) {
	        double met_value = (fake_met_bins[met_bin]+fake_met_bins[met_bin+1])/2;
	        double met_bin_range = (fake_met_bins[met_bin+1]-fake_met_bins[met_bin])/2;
	        met_values.push_back(met_value);
	        met_range_values.push_back(met_bin_range);
		std::vector<float> eff_errs = geteff_0l_fakemet(met_value, ht_value);
		eff_values.push_back(eff_errs[0]);
		errup_values.push_back(eff_errs[1]);
		errdown_values.push_back(eff_errs[2]);
	    }
	    //get new efficiencies from histograms
	    std::string qcdhist_name = "hist_MET_pt_ht_data_all";
	    if (year == "2017") {
	      qcdhist_name = "hist_MET_pt_ht_runcdef_all";
	    }
            //TH2D* numerator_hist = static_cast<TH2D*>((f_qcd->Get((qcdhist_name+";1").c_str()))->Clone());
            //TH2D* denominator_hist = static_cast<TH2D*>((f_qcd->Get((qcdhist_name+";2").c_str()))->Clone());
	    //if (year == "2017") {
            //  TH2D* run_b_numerator_hist = static_cast<TH2D*>((f_qcd->Get("hist_MET_pt_ht_runb_all;1"))->Clone());
            //  TH2D* run_b_denominator_hist = static_cast<TH2D*>((f_qcd->Get("hist_MET_pt_ht_runb_all;2"))->Clone());
	    //  numerator_hist->Add(run_b_numerator_hist);
	    //  denominator_hist->Add(run_b_denominator_hist);
	    //}
            TH2D* numerator_hist = static_cast<TH2D*>((f->Get("hist_fakemetht_numerator"))->Clone());
            TH2D* denominator_hist = static_cast<TH2D*>((f->Get("hist_fakemetht_denominator"))->Clone());
	    TH1D* numerator_1d_hist = numerator_hist->ProjectionX("numerator_1d_hist",ht_bin+1,ht_bin+1);
	    TH1D* denominator_1d_hist = denominator_hist->ProjectionX("denominator_1d_hist",ht_bin+1,ht_bin+1);
	    new_eff_plots.push_back(new TGraphAsymmErrors(numerator_1d_hist,denominator_1d_hist));
	    an_eff_plots.push_back(new TGraphAsymmErrors(met_values.size(),met_values.data(),eff_values.data(),met_range_values.data(),met_range_values.data(),errdown_values.data(),errup_values.data()));
	    an_eff_plots[ht_bin]->SetTitle(("0l fake met (QCD) trigger efficiency HT#in ["+std::to_string(ht_bins[ht_bin])+","+std::to_string(ht_bins[ht_bin+1])+"]; MET; Efficiency").c_str());
  	    an_eff_plots[ht_bin]->GetYaxis()->SetRangeUser(0,1.4);
	    an_eff_plots[ht_bin]->SetLineColor(kRed);
	    an_eff_plots[ht_bin]->Draw("AP");
	    new_eff_plots[ht_bin]->Draw("P same");
	    TLegend* leg = new TLegend(0.5,0.1,0.9,0.3);
	    leg->AddEntry(new_eff_plots[ht_bin],"New Efficiency MET(100, 110, 120)(NoMu)","f");
	    leg->AddEntry(an_eff_plots[ht_bin],"AN Efficiency MET(100, 110, 120)(NoMu)","f");
	    leg->Draw("same");
	    fakemet_canvas[ht_bin]->SaveAs(("plots/fakemet_effhtbin_"+std::to_string(ht_bin)+".png").c_str());
	}
	//write out function to file
        apply_effs_file << "const NamedFunc get_0l_fakemet_trigeff" << year << "(\"get_0l_fakemet_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., met = b.met(), ht = b.ht();\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	bool first = true;
	for (int met_bin = 0; met_bin < fake_met_bins.size()-1; met_bin++) {
	    double met_upper = met_bin==(fake_met_bins.size()-2) ? 9999 : fake_met_bins[met_bin+1];
	    for (int ht_bin = 0; ht_bin < ht_bins.size()-1; ht_bin++) {
	        double ht_upper = ht_bin==(ht_bins.size()-2) ? 9999 : ht_bins[ht_bin+1];
		double* eff_pts = new_eff_plots[ht_bin]->GetY();
                if (first) {
		    apply_effs_file << "  if (ht> ";
		    first = false;
		}
		else apply_effs_file << "  else if (ht> ";
		apply_effs_file << ht_bins[ht_bin] << " && ht<= " << ht_upper;
		apply_effs_file << " && met> " << fake_met_bins[met_bin] << " && met<= " << met_upper;
		apply_effs_file << ") {eff = " << eff_pts[met_bin] << "; errup = " << new_eff_plots[ht_bin]->GetErrorYhigh(met_bin) << "; errdown = " << new_eff_plots[ht_bin]->GetErrorYlow(met_bin) << ";}\n";
	    }
	}
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
    }
    //1el region graphs
    if (draw_1el_graphs) {
	//loop over el_pt - each el_pt bin is a new TGraphAsymmErrors
	std::vector<TCanvas*> elmet_canvas;
	std::vector<TGraphAsymmErrors*> an_eff_plots;
	std::vector<TGraphAsymmErrors*> new_eff_plots;
	for (int el_pt_bin = 0; el_pt_bin < el_pt_bins.size()-1; el_pt_bin++) {
	    double el_pt_value = (el_pt_bins[el_pt_bin]+el_pt_bins[el_pt_bin+1])/2;
	    elmet_canvas.push_back(new TCanvas());
	    elmet_canvas[el_pt_bin]->cd();
	    elmet_canvas[el_pt_bin]->SetGrid();
	    std::vector<double> met_values;
	    std::vector<double> met_range_values;
	    std::vector<double> eff_values;
	    std::vector<double> errup_values;
	    std::vector<double> errdown_values;
	    //loop over met bins for old efficiencies
	    for (int met_bin = 0; met_bin < twodim_met_bins.size()-1; met_bin++) {
	        double met_value = (twodim_met_bins[met_bin]+twodim_met_bins[met_bin+1])/2;
	        double met_bin_range = (twodim_met_bins[met_bin+1]-twodim_met_bins[met_bin])/2;
	        met_values.push_back(met_value);
	        met_range_values.push_back(met_bin_range);
		std::vector<float> eff_errs = geteff_1el(met_value, el_pt_value);
		eff_values.push_back(eff_errs[0]);
		errup_values.push_back(eff_errs[1]);
		errdown_values.push_back(eff_errs[2]);
	    }
	    //get new efficiencies from histograms
            TH2D* numerator_hist = static_cast<TH2D*>((f->Get("hist_metelpt_numerator"))->Clone());
            TH2D* denominator_hist = static_cast<TH2D*>((f->Get("hist_metelpt_denominator"))->Clone());
	    TH1D* numerator_1d_hist = numerator_hist->ProjectionX("numerator_1d_hist",el_pt_bin+1,el_pt_bin+1);
	    TH1D* denominator_1d_hist = denominator_hist->ProjectionX("denominator_1d_hist",el_pt_bin+1,el_pt_bin+1);
	    new_eff_plots.push_back(new TGraphAsymmErrors(numerator_1d_hist,denominator_1d_hist));
	    an_eff_plots.push_back(new TGraphAsymmErrors(met_values.size(),met_values.data(),eff_values.data(),met_range_values.data(),met_range_values.data(),errdown_values.data(),errup_values.data()));
	    an_eff_plots[el_pt_bin]->SetTitle(("1e trigger efficiency p_{Te}#in ["+std::to_string(el_pt_bins[el_pt_bin])+","+std::to_string(el_pt_bins[el_pt_bin+1])+"]; MET; Efficiency").c_str());
  	    an_eff_plots[el_pt_bin]->GetYaxis()->SetRangeUser(0,1.4);
	    an_eff_plots[el_pt_bin]->SetLineColor(kRed);
	    an_eff_plots[el_pt_bin]->Draw("AP");
	    new_eff_plots[el_pt_bin]->Draw("P same");
	    TLegend* leg = new TLegend(0.5,0.1,0.9,0.3);
	    leg->AddEntry(new_eff_plots[el_pt_bin],"New Efficiency MET(100, 110, 120)(NoMu) Ele(Iso27, Iso35, 115)","f");
	    leg->AddEntry(an_eff_plots[el_pt_bin],"AN Efficiency MET(100, 110, 120)(NoMu) Ele(Iso27LooseBarrel, Iso27, 105, 115)","f");
	    leg->Draw("same");
	    elmet_canvas[el_pt_bin]->SaveAs(("plots/elmet_effelptbin_"+std::to_string(el_pt_bin)+".png").c_str());
	}
	//write out function to file
        apply_effs_file << "const NamedFunc get_1el_trigeff" << year << "(\"get_1el_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., met = b.met(), el_pt = signal_lepton_pt(b.el_pt(),b.el_sig());\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	bool first = true;
	for (int met_bin = 0; met_bin < twodim_met_bins.size()-1; met_bin++) {
	    double met_upper = met_bin==(twodim_met_bins.size()-2) ? 9999 : twodim_met_bins[met_bin+1];
	    for (int el_pt_bin = 0; el_pt_bin < el_pt_bins.size()-1; el_pt_bin++) {
	        double el_pt_upper = el_pt_bin==(el_pt_bins.size()-2) ? 9999 : el_pt_bins[el_pt_bin+1];
		double* eff_pts = new_eff_plots[el_pt_bin]->GetY();
                if (first) {
		    apply_effs_file << "  if (el_pt> ";
		    first = false;
		}
		else apply_effs_file << "  else if (el_pt> ";
		apply_effs_file << el_pt_bins[el_pt_bin] << " && el_pt<= " << el_pt_upper;
		apply_effs_file << " && met> " << twodim_met_bins[met_bin] << " && met<= " << met_upper;
		apply_effs_file << ") {eff = " << eff_pts[met_bin] << "; errup = " << new_eff_plots[el_pt_bin]->GetErrorYhigh(met_bin) << "; errdown = " << new_eff_plots[el_pt_bin]->GetErrorYlow(met_bin) << ";}\n";
	    }
	}
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
    }
    if (draw_1mu_graphs) {
	//loop over el_pt - each el_pt bin is a new TGraphAsymmErrors
	std::vector<TCanvas*> mumet_canvas;
	std::vector<TGraphAsymmErrors*> an_eff_plots;
	std::vector<TGraphAsymmErrors*> new_eff_plots;
	for (int mu_pt_bin = 0; mu_pt_bin < mu_pt_bins.size()-1; mu_pt_bin++) {
	    double mu_pt_value = (mu_pt_bins[mu_pt_bin]+mu_pt_bins[mu_pt_bin+1])/2;
	    mumet_canvas.push_back(new TCanvas());
	    mumet_canvas[mu_pt_bin]->cd();
	    mumet_canvas[mu_pt_bin]->SetGrid();
	    std::vector<double> met_values;
	    std::vector<double> met_range_values;
	    std::vector<double> eff_values;
	    std::vector<double> errup_values;
	    std::vector<double> errdown_values;
	    //loop over met bins for old efficiencies
	    for (int met_bin = 0; met_bin < twodim_met_bins.size()-1; met_bin++) {
	        double met_value = (twodim_met_bins[met_bin]+twodim_met_bins[met_bin+1])/2;
	        double met_bin_range = (twodim_met_bins[met_bin+1]-twodim_met_bins[met_bin])/2;
	        met_values.push_back(met_value);
	        met_range_values.push_back(met_bin_range);
		std::vector<float> eff_errs = geteff_1mu(met_value, mu_pt_value);
		eff_values.push_back(eff_errs[0]);
		errup_values.push_back(eff_errs[1]);
		errdown_values.push_back(eff_errs[2]);
	    }
	    //get new efficiencies from histograms
            TH2D* numerator_hist = static_cast<TH2D*>((f->Get("hist_metmupt_numerator"))->Clone());
            TH2D* denominator_hist = static_cast<TH2D*>((f->Get("hist_metmupt_denominator"))->Clone());
	    TH1D* numerator_1d_hist = numerator_hist->ProjectionX("numerator_1d_hist",mu_pt_bin+1,mu_pt_bin+1);
	    TH1D* denominator_1d_hist = denominator_hist->ProjectionX("denominator_1d_hist",mu_pt_bin+1,mu_pt_bin+1);
	    new_eff_plots.push_back(new TGraphAsymmErrors(numerator_1d_hist,denominator_1d_hist));
	    an_eff_plots.push_back(new TGraphAsymmErrors(met_values.size(),met_values.data(),eff_values.data(),met_range_values.data(),met_range_values.data(),errdown_values.data(),errup_values.data()));
	    an_eff_plots[mu_pt_bin]->SetTitle(("1#mu trigger efficiency p_{T#mu}#in ["+std::to_string(mu_pt_bins[mu_pt_bin])+","+std::to_string(mu_pt_bins[mu_pt_bin+1])+"]; MET; Efficiency").c_str());
  	    an_eff_plots[mu_pt_bin]->GetYaxis()->SetRangeUser(0,1.4);
	    an_eff_plots[mu_pt_bin]->SetLineColor(kRed);
	    an_eff_plots[mu_pt_bin]->Draw("AP");
	    new_eff_plots[mu_pt_bin]->Draw("P same");
	    TLegend* leg = new TLegend(0.5,0.1,0.9,0.3);
	    leg->AddEntry(new_eff_plots[mu_pt_bin],"New Efficiency MET(100, 110, 120)(NoMu) Mu(Iso24, Iso27, 50)","f");
	    leg->AddEntry(an_eff_plots[mu_pt_bin],"AN Efficiency MET(100, 110, 120)(NoMu) Mu(Iso24, IsoTk24, 50)","f");
	    leg->Draw("same");
	    mumet_canvas[mu_pt_bin]->SaveAs(("plots/mumet_effmuptbin_"+std::to_string(mu_pt_bin)+".png").c_str());
	}
	//write out function to file
        apply_effs_file << "const NamedFunc get_1mu_trigeff" << year << "(\"get_1mu_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., met = b.met(), mu_pt = signal_lepton_pt(b.mu_pt(),b.mu_sig());\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	bool first = true;
	for (int met_bin = 0; met_bin < twodim_met_bins.size()-1; met_bin++) {
	    double met_upper = met_bin==(twodim_met_bins.size()-2) ? 9999 : twodim_met_bins[met_bin+1];
	    for (int mu_pt_bin = 0; mu_pt_bin < mu_pt_bins.size()-1; mu_pt_bin++) {
	        double mu_pt_upper = mu_pt_bin==(mu_pt_bins.size()-2) ? 9999 : mu_pt_bins[mu_pt_bin+1];
		double* eff_pts = new_eff_plots[mu_pt_bin]->GetY();
                if (first) {
		    apply_effs_file << "  if (mu_pt> ";
		    first = false;
		}
		else apply_effs_file << "  else if (mu_pt> ";
		apply_effs_file << mu_pt_bins[mu_pt_bin] << " && mu_pt<= " << mu_pt_upper;
		apply_effs_file << " && met> " << twodim_met_bins[met_bin] << " && met<= " << met_upper;
		apply_effs_file << ") {eff = " << eff_pts[met_bin] << "; errup = " << new_eff_plots[mu_pt_bin]->GetErrorYhigh(met_bin) << "; errdown = " << new_eff_plots[mu_pt_bin]->GetErrorYlow(met_bin) << ";}\n";
	    }
	}
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
    }
    if (draw_2l_graphs) {
	//loop over el_pt - each el_pt bin is a new TGraphAsymmErrors
	TCanvas* elel_canvas = new TCanvas();
	elel_canvas->cd();
	elel_canvas->SetGrid();
	std::vector<double> el_pt_values;
	std::vector<double> el_pt_range_values;
	std::vector<double> el_eff_values;
	std::vector<double> el_errup_values;
	std::vector<double> el_errdown_values;
	for (int el_pt_bin = 0; el_pt_bin < twoel_pt_bins.size()-1; el_pt_bin++) {
	    double el_pt_value = (twoel_pt_bins[el_pt_bin]+twoel_pt_bins[el_pt_bin+1])/2;
	    double el_pt_range_value = (twoel_pt_bins[el_pt_bin+1]-twoel_pt_bins[el_pt_bin])/2;
	    std::vector<float> eff_errs = geteff_2el(el_pt_value);
	    el_pt_values.push_back(el_pt_value);
	    el_pt_range_values.push_back(el_pt_range_value);
	    el_eff_values.push_back(eff_errs[0]);
	    el_errup_values.push_back(eff_errs[1]);
	    el_errdown_values.push_back(eff_errs[2]);
	}
        TGraphAsymmErrors* new_el_eff = static_cast<TGraphAsymmErrors*>((f->Get("hist_elel_ratio"))->Clone());
        TGraphAsymmErrors* old_el_eff = new TGraphAsymmErrors(el_pt_values.size(),el_pt_values.data(),el_eff_values.data(),el_pt_range_values.data(),el_pt_range_values.data(),el_errdown_values.data(),el_errup_values.data());
        old_el_eff->SetTitle("2e trigger efficiency; Max Electron Pt (GeV); Efficiency");
        old_el_eff->GetYaxis()->SetRangeUser(0,1.4);
        old_el_eff->SetLineColor(kRed);
        old_el_eff->Draw("AP");
        new_el_eff->Draw("P same");
        TLegend* leg = new TLegend(0.5,0.1,0.9,0.3);
        leg->AddEntry(new_el_eff,"New Efficiency El(Iso27, Iso35, 115)","f");
        leg->AddEntry(old_el_eff,"AN Efficiency El(Iso27LooseBarrel, Iso27, 105, 115)","f");
        leg->Draw("same");
        elel_canvas->SaveAs("plots/elel_eff.png");
	TCanvas* mumu_canvas = new TCanvas();
	mumu_canvas->cd();
	mumu_canvas->SetGrid();
	std::vector<double> mu_pt_values;
	std::vector<double> mu_pt_range_values;
	std::vector<double> mu_eff_values;
	std::vector<double> mu_errup_values;
	std::vector<double> mu_errdown_values;
	for (int mu_pt_bin = 0; mu_pt_bin < twomu_pt_bins.size()-1; mu_pt_bin++) {
	    double mu_pt_value = (twomu_pt_bins[mu_pt_bin]+twomu_pt_bins[mu_pt_bin+1])/2;
	    double mu_pt_range_value = (twomu_pt_bins[mu_pt_bin+1]-twomu_pt_bins[mu_pt_bin])/2;
	    std::vector<float> eff_errs = geteff_2mu(mu_pt_value);
	    mu_pt_values.push_back(mu_pt_value);
	    mu_pt_range_values.push_back(mu_pt_range_value);
	    mu_eff_values.push_back(eff_errs[0]);
	    mu_errup_values.push_back(eff_errs[1]);
	    mu_errdown_values.push_back(eff_errs[2]);
	}
        TGraphAsymmErrors* new_mu_eff = static_cast<TGraphAsymmErrors*>((f->Get("hist_mumu_ratio"))->Clone());
        TGraphAsymmErrors* old_mu_eff = new TGraphAsymmErrors(mu_pt_values.size(),mu_pt_values.data(),mu_eff_values.data(),mu_pt_range_values.data(),mu_pt_range_values.data(),mu_errdown_values.data(),mu_errup_values.data());
        old_mu_eff->SetTitle("2#mu trigger efficiency; Max Muon Pt (GeV); Efficiency");
        old_mu_eff->GetYaxis()->SetRangeUser(0,1.4);
        old_mu_eff->SetLineColor(kRed);
        old_mu_eff->Draw("AP");
        new_mu_eff->Draw("P same");
        TLegend* muleg = new TLegend(0.5,0.1,0.9,0.3);
        muleg->AddEntry(new_mu_eff,"New Efficiency Mu(Iso24, Iso27, 50)","f");
        muleg->AddEntry(old_mu_eff,"AN Efficiency Mu(Iso24, IsoTk24, 50)","f");
        muleg->Draw("same");
        mumu_canvas->SaveAs("plots/mumu_eff.png");
	//write out functions to file
	//el function
        apply_effs_file << "const NamedFunc get_2el_trigeff" << year << "(\"get_2el_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., el_pt = signal_lepton_pt(b.el_pt(),b.el_sig());\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	bool first = true;
        double* eff_pts = new_el_eff->GetY();
        for (int el_pt_bin = 0; el_pt_bin < twoel_pt_bins.size()-1; el_pt_bin++) {
            double el_pt_upper = el_pt_bin==(twoel_pt_bins.size()-2) ? 9999 : twoel_pt_bins[el_pt_bin+1];
            if (first) {
                apply_effs_file << "  if (el_pt> ";
                first = false;
            }
            else apply_effs_file << "  else if (el_pt> ";
            apply_effs_file << twoel_pt_bins[el_pt_bin] << " && el_pt<= " << el_pt_upper;
            apply_effs_file << ") {eff = " << eff_pts[el_pt_bin] << "; errup = " << new_el_eff->GetErrorYhigh(el_pt_bin) << "; errdown = " << new_el_eff->GetErrorYlow(el_pt_bin) << ";}\n";
        }
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
	//mu function
        apply_effs_file << "const NamedFunc get_2mu_trigeff" << year << "(\"get_2mu_trigeff" << year << "\", [](const Baby &b) -> NamedFunc::ScalarType{\n";
        apply_effs_file << "  float errup=0., errdown=0.; // Not used, but for reference\n";
        apply_effs_file << "  float eff = 1., mu_pt = signal_lepton_pt(b.mu_pt(),b.mu_sig());\n";
        apply_effs_file << "  errup+=errdown; //suppress unused warning\n";
	first = true;
        eff_pts = new_mu_eff->GetY();
        for (int mu_pt_bin = 0; mu_pt_bin < twomu_pt_bins.size()-1; mu_pt_bin++) {
            double mu_pt_upper = mu_pt_bin==(twomu_pt_bins.size()-2) ? 9999 : twomu_pt_bins[mu_pt_bin+1];
            if (first) {
                apply_effs_file << "  if (mu_pt> ";
                first = false;
            }
            else apply_effs_file << "  else if (mu_pt> ";
            apply_effs_file << twomu_pt_bins[mu_pt_bin] << " && mu_pt<= " << mu_pt_upper;
            apply_effs_file << ") {eff = " << eff_pts[mu_pt_bin] << "; errup = " << new_mu_eff->GetErrorYhigh(mu_pt_bin) << "; errdown = " << new_mu_eff->GetErrorYlow(mu_pt_bin) << ";}\n";
        }
	apply_effs_file << "  return eff;\n";
        apply_effs_file << "});\n\n";
    }
    apply_effs_file << "}\n";
    apply_effs_file.close();
    std::cout << "Wrote src/higgsino/apply_trigeffs.cpp" << std::endl;
    return 0;
}

std::vector<float> geteff_0l(float met, float ht) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(ht>   0 && ht<= 200 && met> 150 && met<= 155) {eff = 0.532; errup = 0.013; errdown = 0.013;}
    else if(ht> 200 && ht<= 600 && met> 150 && met<= 155) {eff = 0.612; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 150 && met<= 155) {eff = 0.589; errup = 0.023; errdown = 0.024;}
    else if(ht> 800 && ht<=1000 && met> 150 && met<= 155) {eff = 0.515; errup = 0.042; errdown = 0.042;}
    else if(ht>1000 && ht<=9999 && met> 150 && met<= 155) {eff = 0.588; errup = 0.052; errdown = 0.054;}
    else if(ht>   0 && ht<= 200 && met> 155 && met<= 160) {eff = 0.591; errup = 0.014; errdown = 0.014;}
    else if(ht> 200 && ht<= 600 && met> 155 && met<= 160) {eff = 0.684; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 155 && met<= 160) {eff = 0.678; errup = 0.022; errdown = 0.022;}
    else if(ht> 800 && ht<=1000 && met> 155 && met<= 160) {eff = 0.537; errup = 0.042; errdown = 0.042;}
    else if(ht>1000 && ht<=9999 && met> 155 && met<= 160) {eff = 0.511; errup = 0.057; errdown = 0.057;}
    else if(ht>   0 && ht<= 200 && met> 160 && met<= 165) {eff = 0.619; errup = 0.016; errdown = 0.016;}
    else if(ht> 200 && ht<= 600 && met> 160 && met<= 165) {eff = 0.727; errup = 0.006; errdown = 0.006;}
    else if(ht> 600 && ht<= 800 && met> 160 && met<= 165) {eff = 0.699; errup = 0.022; errdown = 0.023;}
    else if(ht> 800 && ht<=1000 && met> 160 && met<= 165) {eff = 0.690; errup = 0.039; errdown = 0.041;}
    else if(ht>1000 && ht<=9999 && met> 160 && met<= 165) {eff = 0.568; errup = 0.048; errdown = 0.049;}
    else if(ht>   0 && ht<= 200 && met> 165 && met<= 170) {eff = 0.678; errup = 0.017; errdown = 0.018;}
    else if(ht> 200 && ht<= 600 && met> 165 && met<= 170) {eff = 0.769; errup = 0.006; errdown = 0.006;}
    else if(ht> 600 && ht<= 800 && met> 165 && met<= 170) {eff = 0.732; errup = 0.022; errdown = 0.023;}
    else if(ht> 800 && ht<=1000 && met> 165 && met<= 170) {eff = 0.609; errup = 0.042; errdown = 0.044;}
    else if(ht>1000 && ht<=9999 && met> 165 && met<= 170) {eff = 0.685; errup = 0.058; errdown = 0.064;}
    else if(ht>   0 && ht<= 200 && met> 170 && met<= 175) {eff = 0.670; errup = 0.019; errdown = 0.020;}
    else if(ht> 200 && ht<= 600 && met> 170 && met<= 175) {eff = 0.811; errup = 0.005; errdown = 0.006;}
    else if(ht> 600 && ht<= 800 && met> 170 && met<= 175) {eff = 0.779; errup = 0.022; errdown = 0.024;}
    else if(ht> 800 && ht<=1000 && met> 170 && met<= 175) {eff = 0.736; errup = 0.041; errdown = 0.045;}
    else if(ht>1000 && ht<=9999 && met> 170 && met<= 175) {eff = 0.663; errup = 0.056; errdown = 0.061;}
    else if(ht>   0 && ht<= 200 && met> 175 && met<= 180) {eff = 0.730; errup = 0.020; errdown = 0.021;}
    else if(ht> 200 && ht<= 600 && met> 175 && met<= 180) {eff = 0.838; errup = 0.005; errdown = 0.006;}
    else if(ht> 600 && ht<= 800 && met> 175 && met<= 180) {eff = 0.820; errup = 0.022; errdown = 0.024;}
    else if(ht> 800 && ht<=1000 && met> 175 && met<= 180) {eff = 0.819; errup = 0.037; errdown = 0.043;}
    else if(ht>1000 && ht<=9999 && met> 175 && met<= 180) {eff = 0.736; errup = 0.055; errdown = 0.062;}
    else if(ht>   0 && ht<= 200 && met> 180 && met<= 185) {eff = 0.745; errup = 0.023; errdown = 0.024;}
    else if(ht> 200 && ht<= 600 && met> 180 && met<= 185) {eff = 0.874; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 180 && met<= 185) {eff = 0.848; errup = 0.021; errdown = 0.023;}
    else if(ht> 800 && ht<=1000 && met> 180 && met<= 185) {eff = 0.869; errup = 0.038; errdown = 0.048;}
    else if(ht>1000 && ht<=9999 && met> 180 && met<= 185) {eff = 0.759; errup = 0.048; errdown = 0.055;}
    else if(ht>   0 && ht<= 200 && met> 185 && met<= 190) {eff = 0.777; errup = 0.024; errdown = 0.026;}
    else if(ht> 200 && ht<= 600 && met> 185 && met<= 190) {eff = 0.903; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 185 && met<= 190) {eff = 0.850; errup = 0.021; errdown = 0.023;}
    else if(ht> 800 && ht<=1000 && met> 185 && met<= 190) {eff = 0.839; errup = 0.041; errdown = 0.049;}
    else if(ht>1000 && ht<=9999 && met> 185 && met<= 190) {eff = 0.847; errup = 0.044; errdown = 0.055;}
    else if(ht>   0 && ht<= 200 && met> 190 && met<= 195) {eff = 0.792; errup = 0.026; errdown = 0.028;}
    else if(ht> 200 && ht<= 600 && met> 190 && met<= 195) {eff = 0.907; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 190 && met<= 195) {eff = 0.884; errup = 0.020; errdown = 0.023;}
    else if(ht> 800 && ht<=1000 && met> 190 && met<= 195) {eff = 0.870; errup = 0.036; errdown = 0.045;}
    else if(ht>1000 && ht<=9999 && met> 190 && met<= 195) {eff = 0.781; errup = 0.051; errdown = 0.059;}
    else if(ht>   0 && ht<= 200 && met> 195 && met<= 200) {eff = 0.757; errup = 0.033; errdown = 0.036;}
    else if(ht> 200 && ht<= 600 && met> 195 && met<= 200) {eff = 0.924; errup = 0.005; errdown = 0.005;}
    else if(ht> 600 && ht<= 800 && met> 195 && met<= 200) {eff = 0.921; errup = 0.016; errdown = 0.020;}
    else if(ht> 800 && ht<=1000 && met> 195 && met<= 200) {eff = 0.936; errup = 0.027; errdown = 0.041;}
    else if(ht>1000 && ht<=9999 && met> 195 && met<= 200) {eff = 0.803; errup = 0.049; errdown = 0.059;}
    else if(ht>   0 && ht<= 200 && met> 200 && met<= 210) {eff = 0.841; errup = 0.022; errdown = 0.025;}
    else if(ht> 200 && ht<= 600 && met> 200 && met<= 210) {eff = 0.949; errup = 0.003; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 200 && met<= 210) {eff = 0.927; errup = 0.013; errdown = 0.015;}
    else if(ht> 800 && ht<=1000 && met> 200 && met<= 210) {eff = 0.894; errup = 0.023; errdown = 0.027;}
    else if(ht>1000 && ht<=9999 && met> 200 && met<= 210) {eff = 0.839; errup = 0.036; errdown = 0.042;}
    else if(ht>   0 && ht<= 200 && met> 210 && met<= 220) {eff = 0.850; errup = 0.028; errdown = 0.032;}
    else if(ht> 200 && ht<= 600 && met> 210 && met<= 220) {eff = 0.966; errup = 0.003; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 210 && met<= 220) {eff = 0.952; errup = 0.011; errdown = 0.013;}
    else if(ht> 800 && ht<=1000 && met> 210 && met<= 220) {eff = 0.919; errup = 0.024; errdown = 0.031;}
    else if(ht>1000 && ht<=9999 && met> 210 && met<= 220) {eff = 0.959; errup = 0.018; errdown = 0.027;}
    else if(ht>   0 && ht<= 200 && met> 220 && met<= 230) {eff = 0.896; errup = 0.029; errdown = 0.037;}
    else if(ht> 200 && ht<= 600 && met> 220 && met<= 230) {eff = 0.973; errup = 0.003; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 220 && met<= 230) {eff = 0.979; errup = 0.008; errdown = 0.011;}
    else if(ht> 800 && ht<=1000 && met> 220 && met<= 230) {eff = 0.956; errup = 0.017; errdown = 0.025;}
    else if(ht>1000 && ht<=9999 && met> 220 && met<= 230) {eff = 0.971; errup = 0.016; errdown = 0.027;}
    else if(ht>   0 && ht<= 200 && met> 230 && met<= 240) {eff = 0.844; errup = 0.042; errdown = 0.053;}
    else if(ht> 200 && ht<= 600 && met> 230 && met<= 240) {eff = 0.983; errup = 0.003; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 230 && met<= 240) {eff = 0.976; errup = 0.009; errdown = 0.013;}
    else if(ht> 800 && ht<=1000 && met> 230 && met<= 240) {eff = 0.983; errup = 0.011; errdown = 0.022;}
    else if(ht>1000 && ht<=9999 && met> 230 && met<= 240) {eff = 0.942; errup = 0.028; errdown = 0.043;}
    else if(ht>   0 && ht<= 200 && met> 240 && met<= 250) {eff = 0.880; errup = 0.047; errdown = 0.065;}
    else if(ht> 200 && ht<= 600 && met> 240 && met<= 250) {eff = 0.985; errup = 0.003; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 240 && met<= 250) {eff = 0.992; errup = 0.005; errdown = 0.010;}
    else if(ht> 800 && ht<=1000 && met> 240 && met<= 250) {eff = 0.989; errup = 0.010; errdown = 0.026;}
    else if(ht>1000 && ht<=9999 && met> 240 && met<= 250) {eff = 0.931; errup = 0.030; errdown = 0.044;}
    else if(ht>   0 && ht<= 200 && met> 250 && met<= 275) {eff = 0.915; errup = 0.033; errdown = 0.047;}
    else if(ht> 200 && ht<= 600 && met> 250 && met<= 275) {eff = 0.989; errup = 0.002; errdown = 0.002;}
    else if(ht> 600 && ht<= 800 && met> 250 && met<= 275) {eff = 0.992; errup = 0.004; errdown = 0.006;}
    else if(ht> 800 && ht<=1000 && met> 250 && met<= 275) {eff = 0.984; errup = 0.009; errdown = 0.016;}
    else if(ht>1000 && ht<=9999 && met> 250 && met<= 275) {eff = 0.965; errup = 0.015; errdown = 0.023;}
    else if(ht>   0 && ht<= 200 && met> 275 && met<= 300) {eff = 0.862; errup = 0.065; errdown = 0.096;}
    else if(ht> 200 && ht<= 600 && met> 275 && met<= 300) {eff = 0.992; errup = 0.002; errdown = 0.003;}
    else if(ht> 600 && ht<= 800 && met> 275 && met<= 300) {eff = 0.989; errup = 0.005; errdown = 0.008;}
    else if(ht> 800 && ht<=1000 && met> 275 && met<= 300) {eff = 0.963; errup = 0.016; errdown = 0.024;}
    else if(ht>1000 && ht<=9999 && met> 275 && met<= 300) {eff = 0.991; errup = 0.007; errdown = 0.020;}
    else if(ht>   0 && ht<= 200 && met> 300 && met<=9999) {eff = 0.744; errup = 0.074; errdown = 0.089;}
    else if(ht> 200 && ht<= 600 && met> 300 && met<=9999) {eff = 0.994; errup = 0.001; errdown = 0.002;}
    else if(ht> 600 && ht<= 800 && met> 300 && met<=9999) {eff = 0.996; errup = 0.002; errdown = 0.003;}
    else if(ht> 800 && ht<=1000 && met> 300 && met<=9999) {eff = 1.000; errup = 0.000; errdown = 0.003;}
    else if(ht>1000 && ht<=9999 && met> 300 && met<=9999) {eff = 0.987; errup = 0.005; errdown = 0.008;}
    std::vector<float> r_geteff_0l;
    r_geteff_0l.push_back(eff);
    r_geteff_0l.push_back(errup);
    r_geteff_0l.push_back(errdown);
    return r_geteff_0l;
}

std::vector<float> geteff_0l_fakemet(float met, float ht) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(ht>   0 && ht<= 200 && met> 150 && met<= 155) {eff = 0.242; errup = 0.030; errdown = 0.028;}
    else if(ht> 200 && ht<= 600 && met> 150 && met<= 155) {eff = 0.320; errup = 0.007; errdown = 0.006;}
    else if(ht> 600 && ht<= 800 && met> 150 && met<= 155) {eff = 0.359; errup = 0.005; errdown = 0.005;}
    else if(ht> 800 && ht<=1000 && met> 150 && met<= 155) {eff = 0.379; errup = 0.002; errdown = 0.002;}
    else if(ht>1000 && ht<=9999 && met> 150 && met<= 155) {eff = 0.306; errup = 0.002; errdown = 0.002;}
    else if(ht>   0 && ht<= 200 && met> 155 && met<= 160) {eff = 0.217; errup = 0.034; errdown = 0.031;}
    else if(ht> 200 && ht<= 600 && met> 155 && met<= 160) {eff = 0.344; errup = 0.007; errdown = 0.007;}
    else if(ht> 600 && ht<= 800 && met> 155 && met<= 160) {eff = 0.394; errup = 0.005; errdown = 0.005;}
    else if(ht> 800 && ht<=1000 && met> 155 && met<= 160) {eff = 0.421; errup = 0.003; errdown = 0.003;}
    else if(ht>1000 && ht<=9999 && met> 155 && met<= 160) {eff = 0.331; errup = 0.002; errdown = 0.002;}
    else if(ht>   0 && ht<= 200 && met> 160 && met<= 165) {eff = 0.211; errup = 0.036; errdown = 0.033;}
    else if(ht> 200 && ht<= 600 && met> 160 && met<= 165) {eff = 0.387; errup = 0.008; errdown = 0.008;}
    else if(ht> 600 && ht<= 800 && met> 160 && met<= 165) {eff = 0.434; errup = 0.006; errdown = 0.006;}
    else if(ht> 800 && ht<=1000 && met> 160 && met<= 165) {eff = 0.464; errup = 0.003; errdown = 0.003;}
    else if(ht>1000 && ht<=9999 && met> 160 && met<= 165) {eff = 0.363; errup = 0.002; errdown = 0.002;}
    else if(ht>   0 && ht<= 200 && met> 165 && met<= 170) {eff = 0.263; errup = 0.039; errdown = 0.035;}
    else if(ht> 200 && ht<= 600 && met> 165 && met<= 170) {eff = 0.406; errup = 0.009; errdown = 0.009;}
    else if(ht> 600 && ht<= 800 && met> 165 && met<= 170) {eff = 0.469; errup = 0.006; errdown = 0.006;}
    else if(ht> 800 && ht<=1000 && met> 165 && met<= 170) {eff = 0.503; errup = 0.003; errdown = 0.003;}
    else if(ht>1000 && ht<=9999 && met> 165 && met<= 170) {eff = 0.397; errup = 0.002; errdown = 0.002;}
    else if(ht>   0 && ht<= 200 && met> 170 && met<= 175) {eff = 0.328; errup = 0.045; errdown = 0.042;}
    else if(ht> 200 && ht<= 600 && met> 170 && met<= 175) {eff = 0.434; errup = 0.010; errdown = 0.010;}
    else if(ht> 600 && ht<= 800 && met> 170 && met<= 175) {eff = 0.507; errup = 0.007; errdown = 0.007;}
    else if(ht> 800 && ht<=1000 && met> 170 && met<= 175) {eff = 0.545; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 170 && met<= 175) {eff = 0.422; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 175 && met<= 180) {eff = 0.256; errup = 0.047; errdown = 0.042;}
    else if(ht> 200 && ht<= 600 && met> 175 && met<= 180) {eff = 0.463; errup = 0.011; errdown = 0.011;}
    else if(ht> 600 && ht<= 800 && met> 175 && met<= 180) {eff = 0.520; errup = 0.007; errdown = 0.007;}
    else if(ht> 800 && ht<=1000 && met> 175 && met<= 180) {eff = 0.582; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 175 && met<= 180) {eff = 0.455; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 180 && met<= 185) {eff = 0.234; errup = 0.048; errdown = 0.043;}
    else if(ht> 200 && ht<= 600 && met> 180 && met<= 185) {eff = 0.497; errup = 0.011; errdown = 0.011;}
    else if(ht> 600 && ht<= 800 && met> 180 && met<= 185) {eff = 0.558; errup = 0.008; errdown = 0.008;}
    else if(ht> 800 && ht<=1000 && met> 180 && met<= 185) {eff = 0.609; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 180 && met<= 185) {eff = 0.478; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 185 && met<= 190) {eff = 0.330; errup = 0.055; errdown = 0.051;}
    else if(ht> 200 && ht<= 600 && met> 185 && met<= 190) {eff = 0.479; errup = 0.012; errdown = 0.012;}
    else if(ht> 600 && ht<= 800 && met> 185 && met<= 190) {eff = 0.576; errup = 0.008; errdown = 0.008;}
    else if(ht> 800 && ht<=1000 && met> 185 && met<= 190) {eff = 0.646; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 185 && met<= 190) {eff = 0.504; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 190 && met<= 195) {eff = 0.406; errup = 0.053; errdown = 0.051;}
    else if(ht> 200 && ht<= 600 && met> 190 && met<= 195) {eff = 0.537; errup = 0.013; errdown = 0.013;}
    else if(ht> 600 && ht<= 800 && met> 190 && met<= 195) {eff = 0.592; errup = 0.009; errdown = 0.009;}
    else if(ht> 800 && ht<=1000 && met> 190 && met<= 195) {eff = 0.682; errup = 0.005; errdown = 0.005;}
    else if(ht>1000 && ht<=9999 && met> 190 && met<= 195) {eff = 0.528; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 195 && met<= 200) {eff = 0.530; errup = 0.068; errdown = 0.069;}
    else if(ht> 200 && ht<= 600 && met> 195 && met<= 200) {eff = 0.557; errup = 0.014; errdown = 0.014;}
    else if(ht> 600 && ht<= 800 && met> 195 && met<= 200) {eff = 0.609; errup = 0.009; errdown = 0.009;}
    else if(ht> 800 && ht<=1000 && met> 195 && met<= 200) {eff = 0.705; errup = 0.005; errdown = 0.005;}
    else if(ht>1000 && ht<=9999 && met> 195 && met<= 200) {eff = 0.557; errup = 0.004; errdown = 0.004;}
    else if(ht>   0 && ht<= 200 && met> 200 && met<= 210) {eff = 0.407; errup = 0.045; errdown = 0.043;}
    else if(ht> 200 && ht<= 600 && met> 200 && met<= 210) {eff = 0.549; errup = 0.011; errdown = 0.011;}
    else if(ht> 600 && ht<= 800 && met> 200 && met<= 210) {eff = 0.626; errup = 0.007; errdown = 0.007;}
    else if(ht> 800 && ht<=1000 && met> 200 && met<= 210) {eff = 0.729; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 200 && met<= 210) {eff = 0.584; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 210 && met<= 220) {eff = 0.462; errup = 0.045; errdown = 0.044;}
    else if(ht> 200 && ht<= 600 && met> 210 && met<= 220) {eff = 0.576; errup = 0.012; errdown = 0.012;}
    else if(ht> 600 && ht<= 800 && met> 210 && met<= 220) {eff = 0.660; errup = 0.008; errdown = 0.008;}
    else if(ht> 800 && ht<=1000 && met> 210 && met<= 220) {eff = 0.771; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 210 && met<= 220) {eff = 0.626; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 220 && met<= 230) {eff = 0.505; errup = 0.052; errdown = 0.052;}
    else if(ht> 200 && ht<= 600 && met> 220 && met<= 230) {eff = 0.575; errup = 0.013; errdown = 0.014;}
    else if(ht> 600 && ht<= 800 && met> 220 && met<= 230) {eff = 0.667; errup = 0.009; errdown = 0.009;}
    else if(ht> 800 && ht<=1000 && met> 220 && met<= 230) {eff = 0.796; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 220 && met<= 230) {eff = 0.657; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 230 && met<= 240) {eff = 0.462; errup = 0.058; errdown = 0.057;}
    else if(ht> 200 && ht<= 600 && met> 230 && met<= 240) {eff = 0.595; errup = 0.014; errdown = 0.015;}
    else if(ht> 600 && ht<= 800 && met> 230 && met<= 240) {eff = 0.705; errup = 0.009; errdown = 0.009;}
    else if(ht> 800 && ht<=1000 && met> 230 && met<= 240) {eff = 0.823; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 230 && met<= 240) {eff = 0.686; errup = 0.004; errdown = 0.004;}
    else if(ht>   0 && ht<= 200 && met> 240 && met<= 250) {eff = 0.500; errup = 0.057; errdown = 0.057;}
    else if(ht> 200 && ht<= 600 && met> 240 && met<= 250) {eff = 0.614; errup = 0.016; errdown = 0.016;}
    else if(ht> 600 && ht<= 800 && met> 240 && met<= 250) {eff = 0.722; errup = 0.010; errdown = 0.011;}
    else if(ht> 800 && ht<=1000 && met> 240 && met<= 250) {eff = 0.840; errup = 0.005; errdown = 0.005;}
    else if(ht>1000 && ht<=9999 && met> 240 && met<= 250) {eff = 0.711; errup = 0.004; errdown = 0.004;}
    else if(ht>   0 && ht<= 200 && met> 250 && met<= 275) {eff = 0.535; errup = 0.042; errdown = 0.043;}
    else if(ht> 200 && ht<= 600 && met> 250 && met<= 275) {eff = 0.620; errup = 0.011; errdown = 0.011;}
    else if(ht> 600 && ht<= 800 && met> 250 && met<= 275) {eff = 0.736; errup = 0.008; errdown = 0.008;}
    else if(ht> 800 && ht<=1000 && met> 250 && met<= 275) {eff = 0.859; errup = 0.003; errdown = 0.003;}
    else if(ht>1000 && ht<=9999 && met> 250 && met<= 275) {eff = 0.745; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 275 && met<= 300) {eff = 0.569; errup = 0.049; errdown = 0.051;}
    else if(ht> 200 && ht<= 600 && met> 275 && met<= 300) {eff = 0.617; errup = 0.014; errdown = 0.014;}
    else if(ht> 600 && ht<= 800 && met> 275 && met<= 300) {eff = 0.737; errup = 0.010; errdown = 0.010;}
    else if(ht> 800 && ht<=1000 && met> 275 && met<= 300) {eff = 0.882; errup = 0.004; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 275 && met<= 300) {eff = 0.777; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 300 && met<= 350) {eff = 0.558; errup = 0.040; errdown = 0.041;}
    else if(ht> 200 && ht<= 600 && met> 300 && met<= 350) {eff = 0.638; errup = 0.013; errdown = 0.013;}
    else if(ht> 600 && ht<= 800 && met> 300 && met<= 350) {eff = 0.770; errup = 0.010; errdown = 0.010;}
    else if(ht> 800 && ht<=1000 && met> 300 && met<= 350) {eff = 0.902; errup = 0.003; errdown = 0.004;}
    else if(ht>1000 && ht<=9999 && met> 300 && met<= 350) {eff = 0.804; errup = 0.003; errdown = 0.003;}
    else if(ht>   0 && ht<= 200 && met> 350 && met<= 400) {eff = 0.548; errup = 0.056; errdown = 0.057;}
    else if(ht> 200 && ht<= 600 && met> 350 && met<= 400) {eff = 0.642; errup = 0.019; errdown = 0.019;}
    else if(ht> 600 && ht<= 800 && met> 350 && met<= 400) {eff = 0.777; errup = 0.014; errdown = 0.015;}
    else if(ht> 800 && ht<=1000 && met> 350 && met<= 400) {eff = 0.925; errup = 0.005; errdown = 0.005;}
    else if(ht>1000 && ht<=9999 && met> 350 && met<= 400) {eff = 0.838; errup = 0.004; errdown = 0.004;}
    else if(ht>   0 && ht<= 200 && met> 400 && met<= 450) {eff = 0.557; errup = 0.070; errdown = 0.072;}
    else if(ht> 200 && ht<= 600 && met> 400 && met<= 450) {eff = 0.710; errup = 0.024; errdown = 0.025;}
    else if(ht> 600 && ht<= 800 && met> 400 && met<= 450) {eff = 0.864; errup = 0.018; errdown = 0.020;}
    else if(ht> 800 && ht<=1000 && met> 400 && met<= 450) {eff = 0.945; errup = 0.006; errdown = 0.006;}
    else if(ht>1000 && ht<=9999 && met> 400 && met<= 450) {eff = 0.862; errup = 0.005; errdown = 0.005;}
    else if(ht>   0 && ht<= 200 && met> 450 && met<= 500) {eff = 0.735; errup = 0.081; errdown = 0.097;}
    else if(ht> 200 && ht<= 600 && met> 450 && met<= 500) {eff = 0.695; errup = 0.036; errdown = 0.039;}
    else if(ht> 600 && ht<= 800 && met> 450 && met<= 500) {eff = 0.913; errup = 0.022; errdown = 0.028;}
    else if(ht> 800 && ht<=1000 && met> 450 && met<= 500) {eff = 0.970; errup = 0.006; errdown = 0.007;}
    else if(ht>1000 && ht<=9999 && met> 450 && met<= 500) {eff = 0.886; errup = 0.006; errdown = 0.006;}
    else if(ht>   0 && ht<= 200 && met> 500 && met<=9999) {eff = 0.550; errup = 0.088; errdown = 0.091;}
    else if(ht> 200 && ht<= 600 && met> 500 && met<=9999) {eff = 0.731; errup = 0.029; errdown = 0.031;}
    else if(ht> 600 && ht<= 800 && met> 500 && met<=9999) {eff = 0.956; errup = 0.014; errdown = 0.019;}
    else if(ht> 800 && ht<=1000 && met> 500 && met<=9999) {eff = 0.981; errup = 0.004; errdown = 0.005;}
    else if(ht>1000 && ht<=9999 && met> 500 && met<=9999) {eff = 0.907; errup = 0.004; errdown = 0.004;}
    std::vector<float> r_geteff_0l_fakemet;
    r_geteff_0l_fakemet.push_back(eff);
    r_geteff_0l_fakemet.push_back(errup);
    r_geteff_0l_fakemet.push_back(errdown);
    return r_geteff_0l_fakemet;
}

std::vector<float> geteff_1el(float met, float el_pt) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(el_pt>  20 && el_pt<=  25 && met>=0 && met<= 110) {eff=0.160; errup=0.019; errdown = 0.017;}
    else if(el_pt> 25 && el_pt<=  30 && met>=0 && met<= 110) {eff=0.400; errup=0.024; errdown=0.024;}
    else if(el_pt> 30 && el_pt<= 110 && met>=0 && met<= 110) {eff=0.728; errup=0.006; errdown=0.006;}
    else if(el_pt>110 && el_pt<= 120 && met>=0 && met<= 110) {eff=0.880; errup=0.017; errdown=0.019;}
    else if(el_pt>120 && el_pt<=9999 && met>=0 && met<= 110) {eff=0.950; errup=0.003; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met>110 && met<= 120) {eff=0.244; errup=0.024; errdown=0.023;}
    else if(el_pt> 25 && el_pt<=  30 && met>110 && met<= 120) {eff=0.420; errup=0.027; errdown=0.027;}
    else if(el_pt> 30 && el_pt<= 110 && met>110 && met<= 120) {eff=0.761; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met>110 && met<= 120) {eff=0.918; errup=0.015; errdown=0.017;}
    else if(el_pt>120 && el_pt<=9999 && met>110 && met<= 120) {eff=0.958; errup=0.003; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met>120 && met<= 130) {eff=0.331; errup=0.030; errdown=0.029;}
    else if(el_pt> 25 && el_pt<=  30 && met>120 && met<= 130) {eff=0.500; errup=0.031; errdown=0.031;}
    else if(el_pt> 30 && el_pt<= 110 && met>120 && met<= 130) {eff=0.800; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met>120 && met<= 130) {eff=0.928; errup=0.015; errdown=0.018;}
    else if(el_pt>120 && el_pt<=9999 && met>120 && met<= 130) {eff=0.960; errup=0.003; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met>130 && met<= 140) {eff=0.491; errup=0.031; errdown=0.031;}
    else if(el_pt> 25 && el_pt<=  30 && met>130 && met<= 140) {eff=0.608; errup=0.033; errdown=0.034;}
    else if(el_pt> 30 && el_pt<= 110 && met>130 && met<= 140) {eff=0.831; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met>130 && met<= 140) {eff=0.931; errup=0.016; errdown=0.020;}
    else if(el_pt>120 && el_pt<=9999 && met>130 && met<= 140) {eff=0.967; errup=0.003; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met>140 && met<= 150) {eff=0.573; errup=0.033; errdown=0.033;}
    else if(el_pt> 25 && el_pt<=  30 && met>140 && met<= 150) {eff=0.677; errup=0.035; errdown=0.037;}
    else if(el_pt> 30 && el_pt<= 110 && met>140 && met<= 150) {eff=0.856; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met>140 && met<= 150) {eff=0.923; errup=0.018; errdown=0.022;}
    else if(el_pt>120 && el_pt<=9999 && met>140 && met<= 150) {eff=0.971; errup=0.003; errdown=0.004;}
    else if(el_pt> 20 && el_pt<=  25 && met>150 && met<= 160) {eff=0.643; errup=0.037; errdown=0.039;}
    else if(el_pt> 25 && el_pt<=  30 && met> 150 && met<= 160) {eff=0.738; errup=0.033; errdown=0.036;}
    else if(el_pt> 30 && el_pt<= 110 && met> 150 && met<= 160) {eff=0.871; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met> 150 && met<= 160) {eff=0.935; errup=0.016; errdown=0.021;}
    else if(el_pt>120 && el_pt<=9999 && met> 150 && met<= 160) {eff=0.982; errup=0.003; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met> 160 && met<= 170) {eff=0.760; errup=0.034; errdown=0.038;}
    else if(el_pt> 25 && el_pt<=  30 && met> 160 && met<= 170) {eff=0.792; errup=0.034; errdown=0.038;}
    else if(el_pt> 30 && el_pt<= 110 && met> 160 && met<= 170) {eff=0.910; errup=0.007; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met> 160 && met<= 170) {eff=0.970; errup=0.013; errdown=0.020;}
    else if(el_pt>120 && el_pt<=9999 && met> 160 && met<= 170) {eff=0.981; errup=0.003; errdown=0.004;}
    else if(el_pt> 20 && el_pt<=  25 && met> 170 && met<= 180) {eff=0.829; errup=0.033; errdown=0.038;}
    else if(el_pt> 25 && el_pt<=  30 && met> 170 && met<= 180) {eff=0.863; errup=0.031; errdown=0.037;}
    else if(el_pt> 30 && el_pt<= 110 && met> 170 && met<= 180) {eff=0.937; errup=0.006; errdown=0.006;}
    else if(el_pt>110 && el_pt<= 120 && met> 170 && met<= 180) {eff=0.988; errup=0.008; errdown=0.016;}
    else if(el_pt>120 && el_pt<=9999 && met> 170 && met<= 180) {eff=0.982; errup=0.003; errdown=0.004;}
    else if(el_pt> 20 && el_pt<=  25 && met> 180 && met<= 190) {eff=0.761; errup=0.041; errdown=0.046;}
    else if(el_pt> 25 && el_pt<=  30 && met> 180 && met<= 190) {eff=0.863; errup=0.032; errdown=0.038;}
    else if(el_pt> 30 && el_pt<= 110 && met> 180 && met<= 190) {eff=0.939; errup=0.006; errdown=0.007;}
    else if(el_pt>110 && el_pt<= 120 && met> 180 && met<= 190) {eff=0.969; errup=0.015; errdown=0.024;}
    else if(el_pt>120 && el_pt<=9999 && met> 180 && met<= 190) {eff=0.984; errup=0.003; errdown=0.004;}
    else if(el_pt> 20 && el_pt<=  25 && met> 190 && met<= 200) {eff=0.892; errup=0.033; errdown=0.042;}
    else if(el_pt> 25 && el_pt<=  30 && met> 190 && met<= 200) {eff=0.902; errup=0.030; errdown=0.039;}
    else if(el_pt> 30 && el_pt<= 110 && met> 190 && met<= 200) {eff=0.956; errup=0.006; errdown=0.006;}
    else if(el_pt>110 && el_pt<= 120 && met> 190 && met<= 200) {eff=0.983; errup=0.011; errdown=0.022;}
    else if(el_pt>120 && el_pt<=9999 && met> 190 && met<= 200) {eff=0.993; errup=0.002; errdown=0.003;}
    else if(el_pt> 20 && el_pt<=  25 && met> 200 && met<= 210) {eff=0.950; errup=0.021; errdown=0.032;}
    else if(el_pt> 25 && el_pt<=  30 && met> 200 && met<= 210) {eff=0.951; errup=0.023; errdown=0.037;}
    else if(el_pt> 30 && el_pt<= 110 && met> 200 && met<= 210) {eff=0.973; errup=0.005; errdown=0.005;}
    else if(el_pt>110 && el_pt<= 120 && met> 200 && met<= 210) {eff=1.000; errup=0.000; errdown=0.018;}
    else if(el_pt>120 && el_pt<=9999 && met> 200 && met<= 210) {eff=0.985; errup=0.003; errdown=0.004;}
    else if(el_pt> 20 && el_pt<=  25 && met> 210 && met<=9999) {eff=0.974; errup=0.005; errdown=0.006;}
    else if(el_pt> 25 && el_pt<=  30 && met> 210 && met<=9999) {eff=0.981; errup=0.004; errdown=0.005;}
    else if(el_pt> 30 && el_pt<= 110 && met> 210 && met<=9999) {eff=0.992; errup=0.001; errdown=0.001;}
    else if(el_pt>110 && el_pt<= 120 && met> 210 && met<=9999) {eff=0.997; errup=0.002; errdown=0.003;}
    else if(el_pt>120 && el_pt<=9999 && met> 210 && met<=9999) {eff=0.996; errup=0.001; errdown=0.001;}
    std::vector<float> r_geteff_1el;
    r_geteff_1el.push_back(eff);
    r_geteff_1el.push_back(errup);
    r_geteff_1el.push_back(errdown);
    return r_geteff_1el;
}

std::vector<float> geteff_1mu(float met, float mu_pt) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(mu_pt>  20 && mu_pt<=  25 && met>= 0 && met<= 110) {eff=0.271; errup=0.017; errdown = 0.016;}
    else if(mu_pt>25 && mu_pt<=  30 && met>= 0 && met<= 110) {eff=0.725; errup=0.017; errdown=0.018;}
    else if(mu_pt>30 && mu_pt<=  50 && met>= 0 && met<= 110) {eff=0.814; errup=0.008; errdown=0.009;}
    else if(mu_pt>50 && mu_pt<=9999 && met>= 0 && met<= 110) {eff=0.964; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 110 && met<= 120) {eff=0.363; errup=0.020; errdown=0.020;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 110 && met<= 120) {eff=0.755; errup=0.018; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 110 && met<= 120) {eff=0.842; errup=0.009; errdown=0.009;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 110 && met<= 120) {eff=0.969; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 120 && met<= 130) {eff=0.452; errup=0.022; errdown=0.022;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 120 && met<= 130) {eff=0.824; errup=0.018; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 120 && met<= 130) {eff=0.869; errup=0.009; errdown=0.009;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 120 && met<= 130) {eff=0.971; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 130 && met<= 140) {eff=0.590; errup=0.025; errdown=0.025;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 130 && met<= 140) {eff=0.875; errup=0.017; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 130 && met<= 140) {eff=0.904; errup=0.008; errdown=0.009;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 130 && met<= 140) {eff=0.972; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 140 && met<= 150) {eff=0.660; errup=0.026; errdown=0.027;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 140 && met<= 150) {eff=0.891; errup=0.017; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 140 && met<= 150) {eff=0.938; errup=0.007; errdown=0.008;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 140 && met<= 150) {eff=0.980; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 150 && met<= 160) {eff=0.778; errup=0.024; errdown=0.026;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 150 && met<= 160) {eff=0.915; errup=0.016; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 150 && met<= 160) {eff=0.940; errup=0.008; errdown=0.009;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 150 && met<= 160) {eff=0.984; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 160 && met<= 170) {eff=0.798; errup=0.026; errdown=0.029;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 160 && met<= 170) {eff=0.946; errup=0.015; errdown=0.020;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 160 && met<= 170) {eff=0.967; errup=0.006; errdown=0.008;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 160 && met<= 170) {eff=0.991; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 170 && met<= 180) {eff=0.885; errup=0.022; errdown=0.025;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 170 && met<= 180) {eff=0.937; errup=0.016; errdown=0.021;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 170 && met<= 180) {eff=0.977; errup=0.006; errdown=0.007;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 170 && met<= 180) {eff=0.987; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 180 && met<= 190) {eff=0.927; errup=0.019; errdown=0.024;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 180 && met<= 190) {eff=0.958; errup=0.014; errdown=0.019;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 180 && met<= 190) {eff=0.974; errup=0.006; errdown=0.008;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 180 && met<= 190) {eff=0.992; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 190 && met<= 200) {eff=0.921; errup=0.019; errdown=0.024;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 190 && met<= 200) {eff=0.965; errup=0.014; errdown=0.020;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 190 && met<= 200) {eff=0.991; errup=0.004; errdown=0.006;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 190 && met<= 200) {eff=0.991; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 200 && met<= 210) {eff=0.926; errup=0.022; errdown=0.028;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 200 && met<= 210) {eff=0.994; errup=0.005; errdown=0.015;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 200 && met<= 210) {eff=0.994; errup=0.003; errdown=0.006;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 200 && met<= 210) {eff=0.994; errup=0.002; errdown=0.002;}
    else if(mu_pt>20 && mu_pt<=  25 && met> 210 && met<=9999) {eff=0.981; errup=0.004; errdown=0.004;}
    else if(mu_pt>25 && mu_pt<=  30 && met> 210 && met<=9999) {eff=0.994; errup=0.002; errdown=0.003;}
    else if(mu_pt>30 && mu_pt<=  50 && met> 210 && met<=9999) {eff=0.996; errup=0.001; errdown=0.001;}
    else if(mu_pt>50 && mu_pt<=9999 && met> 210 && met<=9999) {eff=0.997; errup=0.000; errdown=0.000;}
    std::vector<float> r_geteff_1mu;
    r_geteff_1mu.push_back(eff);
    r_geteff_1mu.push_back(errup);
    r_geteff_1mu.push_back(errdown);
    return r_geteff_1mu;
}

std::vector<float> geteff_2el(float el_pt) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(el_pt>  40 && el_pt<=  45) {eff = 0.944; errup = 0.015; errdown = 0.019;}
    else if(el_pt>  45 && el_pt<=  50) {eff = 0.910; errup = 0.015; errdown = 0.017;}
    else if(el_pt>  50 && el_pt<=  55) {eff = 0.927; errup = 0.013; errdown = 0.015;}
    else if(el_pt>  55 && el_pt<=  60) {eff = 0.912; errup = 0.013; errdown = 0.015;}
    else if(el_pt>  60 && el_pt<=  65) {eff = 0.941; errup = 0.011; errdown = 0.013;}
    else if(el_pt>  65 && el_pt<=  70) {eff = 0.901; errup = 0.014; errdown = 0.016;}
    else if(el_pt>  70 && el_pt<=  75) {eff = 0.921; errup = 0.013; errdown = 0.016;}
    else if(el_pt>  75 && el_pt<=  80) {eff = 0.947; errup = 0.011; errdown = 0.014;}
    else if(el_pt>  80 && el_pt<=  85) {eff = 0.954; errup = 0.011; errdown = 0.013;}
    else if(el_pt>  85 && el_pt<=  90) {eff = 0.939; errup = 0.012; errdown = 0.014;}
    else if(el_pt>  90 && el_pt<=  95) {eff = 0.940; errup = 0.012; errdown = 0.015;}
    else if(el_pt>  95 && el_pt<= 100) {eff = 0.932; errup = 0.014; errdown = 0.017;}
    else if(el_pt> 100 && el_pt<= 105) {eff = 0.934; errup = 0.014; errdown = 0.017;}
    else if(el_pt> 105 && el_pt<= 110) {eff = 0.965; errup = 0.010; errdown = 0.014;}
    else if(el_pt> 110 && el_pt<=9999) {eff = 0.994; errup = 0.001; errdown = 0.001;}
    std::vector<float> r_geteff_2el;
    r_geteff_2el.push_back(eff);
    r_geteff_2el.push_back(errup);
    r_geteff_2el.push_back(errdown);
    return r_geteff_2el;
}

std::vector<float> geteff_2mu(float mu_pt) {
    float errup = 0., errdown = 0.; 
    float eff = 1.;
    if(mu_pt>  40 && mu_pt<=  45) {eff = 0.959; errup = 0.010; errdown = 0.012;}
    if(mu_pt>  45 && mu_pt<=  50) {eff = 0.970; errup = 0.006; errdown = 0.007;}
    if(mu_pt>  50 && mu_pt<=9999) {eff = 0.982; errup = 0.000; errdown = 0.000;}
    std::vector<float> r_geteff_2mu;
    r_geteff_2mu.push_back(eff);
    r_geteff_2mu.push_back(errup);
    r_geteff_2mu.push_back(errdown);
    return r_geteff_2mu;
}
